datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  plan          String?         @default("free")
  accounts      Account[]
  sessions      Session[]
  tweets        Tweet[]
  likes         Likes[]
  comments      Comment[]
  retweets      Retweet[]
  followers     Follow[] @relation("followers")
  following     Follow[] @relation("following")
  communities   CommunityMember[]
  ownedCommunities Community[]
  communityPosts CommunityPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

// We make a twitter clone with Nextjs and prisma

model Tweet {
  id String @id @default(cuid())
  content String
  imageUrl String?
  views Int @default(0)

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  likes Likes[]
  comments Comment[]
  retweets Retweet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Likes {
  id String @id @default(cuid())

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  tweetId String
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, tweetId])
}

model Comment {
  id String @id @default(cuid())
  content String

  tweetId String
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  parentId String?
  parent Comment? @relation("replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("replies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Retweet {
  id String @id @default(cuid())

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  tweetId String
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, tweetId])
}

model Follow {
  id String @id @default(cuid())

  followerId String
  follower User @relation(name: "followers", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following User @relation(name: "following", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
}

// communities

model Community {
  id String @id @default(cuid())
  name String
  description String?
  imageUrl String?

  ownerId String
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members CommunityMember[]
  posts CommunityPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommunityMember {
  id String @id @default(cuid())

  communityId String
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([communityId, userId])
}

model CommunityPost {
  id String @id @default(cuid())
  content String
  imageUrl String?

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  communityId String
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}